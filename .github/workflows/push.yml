name: Maven Package upon a push 

on:

  pull_request:
    types: [closed]
  push:
    branches:
      #- master
      - 1.1.0
  
jobs:
  build:

    runs-on: ubuntu-latest
    steps:
    - name: Clear artifacts
      uses: kolpav/purge-artifacts-action@v1
      with:
        token: ${{ secrets.TOKEN }}
        expire-in: 10mins 
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        ref: ${{ github.ref }}
        java-version: 1.8
        server-id: central # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Setup branch and GPG public key 
      run: |
        # Strip git ref prefix from version
        echo "::set-env name=BRANCH_NAME::$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')"
        echo ${{ env.BRANCH_NAME }}
        #echo "::set-env name=GPG_TTY::$(tty)"
        #echo ${{ env.GPG_TTY }}
        #sudo apt-get --yes install gnupg2
        #gpg2 --import ./.github/keys/mosipgpgkey_pub.gpg 
        #gpg2 --quiet --batch --passphrase=${{secrets.gpg_secret}}  --allow-secret-key-import --import ./.github/keys/mosipgpgkey_sec.gpg 
     
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-${{ env.BRANCH_NAME }}
    
    - name: Setup the settings file for jfrog server
      run: echo "<settings>  <servers> <server> <username>${{secrets.jfrog_user}}</username> <password>${{secrets.jfrog_secret}}</password><id>central</id> </server> </servers> <profiles>   <profile>     <repositories>         <repository>         <snapshots>           <enabled>false</enabled>         </snapshots>         <id>central</id>         <name>libs-release</name>         <url>http://52.172.8.144:8040/artifactory/libs-release</url>       </repository>       <repository>         <snapshots />         <id>snapshots</id>         <name>libs-snapshot</name>         <url>http://52.172.8.144:8040/artifactory/libs-snapshot</url>       </repository>     </repositories>     <pluginRepositories>       <pluginRepository>         <snapshots>           <enabled>false</enabled>         </snapshots>         <id>central</id>         <name>libs-release</name>      <url>http://52.172.8.144:8040/artifactory/libs-release</url>      </pluginRepository>        <pluginRepository>        <snapshots />         <id>snapshots</id>          <name>libs-snapshot</name>          <url>http://52.172.8.144:8040/artifactory/libs-snapshot</url>       </pluginRepository>     </pluginRepositories> <id>artifactory</id>    </profile>  </profiles>  <activeProfiles>    <activeProfile>artifactory</activeProfile>  </activeProfiles></settings> " > $GITHUB_WORKSPACE/settings.xml

    - name: Build with Maven
      run: |
        #cd registrcdation-processor
        mvn -B package -s $GITHUB_WORKSPACE/settings.xml -DskipTests --file pom.xml
    - name: Ready the springboot artifacts
      run: find -name '*.jar' -executable -type f  -exec zip release.zip {} +


    - name: Upload the springboot jars 
      uses: actions/upload-artifact@v1
      with:
        name: release
        path: ./release.zip

    - name: Publish the maven package
      run: |
        chmod +x ./deploy.sh
        mvn clean install -DskipTests -Dgpg.skip -s $GITHUB_WORKSPACE/settings.xml -f pom.xml
        #cd registration/registration-client/target
        ls -ltr registration/registration-client/
        ls -ltr registration/registration-client/target/
        mv registration/registration-client/target/*.zip reg-client.zip
        zip  reg-client.zip MANIFEST.MF
        zip -r reg-client.zip lib/
      env:
        GITHUB_TOKEN: ${{ secrets.token }}
        #GPG_TTY: $(tty)
    
    - name: Upload the client reg-client 
      uses: actions/upload-artifact@v1
      with:
        name: reg-client
        path: registration/registration-client/target/reg-client.zip
  build_client:
    runs-on: ubuntu-latest
    steps:
    - name: Clear artifacts
      uses: kolpav/purge-artifacts-action@v1
      with:
        token: ${{ secrets.TOKEN }}
        expire-in: 10mins 
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        ref: ${{ github.ref }}
        java-version: 1.8
        server-id: central # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Setup branch and GPG public key
      run: |
        # Strip git ref prefix from version
        echo "::set-env name=BRANCH_NAME::$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')"
        echo ${{ env.BRANCH_NAME }}
        #echo "::set-env name=GPG_TTY::$(tty)"
        #echo ${{ env.GPG_TTY }}
        #sudo apt-get --yes install gnupg2
        #gpg2 --import ./.github/keys/mosipgpgkey_pub.gpg
        #gpg2 --quiet --batch --passphrase=${{secrets.gpg_secret}}  --allow-secret-key-import --import ./.github/keys/mosipgpgkey_sec.gpg
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-${{ env.BRANCH_NAME }}
    - name: Setup the settings file for jfrog server
      run: echo "<settings>  <servers> <server> <username>${{secrets.jfrog_user}}</username> <password>${{secrets.jfrog_secret}}</password><id>central</id> </server> </servers> <profiles>   <profile>     <repositories>         <repository>         <snapshots>           <enabled>false</enabled>         </snapshots>         <id>central</id>         <name>libs-release</name>         <url>http://52.172.8.144:8040/artifactory/libs-release</url>       </repository>       <repository>         <snapshots />         <id>snapshots</id>         <name>libs-snapshot</name>         <url>http://52.172.8.144:8040/artifactory/libs-snapshot</url>       </repository>     </repositories>     <pluginRepositories>       <pluginRepository>         <snapshots>           <enabled>false</enabled>         </snapshots>         <id>central</id>         <name>libs-release</name>      <url>http://52.172.8.144:8040/artifactory/libs-release</url>      </pluginRepository>        <pluginRepository>        <snapshots />         <id>snapshots</id>          <name>libs-snapshot</name>          <url>http://52.172.8.144:8040/artifactory/libs-snapshot</url>       </pluginRepository>     </pluginRepositories> <id>artifactory</id>    </profile>  </profiles>  <activeProfiles>    <activeProfile>artifactory</activeProfile>  </activeProfiles></settings> " > $GITHUB_WORKSPACE/settings.xml

    - name: Install xmllint
      run: |
        sudo apt-get update
        sudo apt-get install libxml2-utils
    - name: Build with Maven
      run: |
        cd registration
        mvn clean install -s $GITHUB_WORKSPACE/settings.xml -DskipTests --file pom.xml    
        #mvn deploy -Dmaven.test.skip=true -Dgpg.skip=true -s $GITHUB_WORKSPACE/settings.xml -f pom.xml -DaltDeploymentRepository=central::default::http://52.172.8.144:8040/artifactory/libs-release
        #cd registration/registration-client/target
        ls -ltr registration-client/
        ls -ltr registration-client/target/
        mv registration-client/target/*.zip reg-client.zip
        zip  reg-client.zip MANIFEST.MF
        zip -r reg-client.zip lib/
      env:
        GITHUB_TOKEN: ${{ secrets.token }}
        #GPG_TTY: $(tty)
    
    - name: Upload the client reg-client 
      uses: actions/upload-artifact@v1
      with:
        name: reg-client
        path: registration/registration-client/target/reg-client.zip

  publish_to_nexus:

    runs-on: ubuntu-latest
    steps:
    - name: Clear artifacts
      uses: kolpav/purge-artifacts-action@v1
      with:
        token: ${{ secrets.TOKEN }}
        expire-in: 10mins 
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        ref: ${{ github.ref }}
        java-version: 1.8
        server-id: central # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
    - uses: actions/checkout@v2


    - name: Setup branch and GPG public key 
      run: |
        # Strip git ref prefix from version
        echo "::set-env name=BRANCH_NAME::$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')"
        echo ${{ env.BRANCH_NAME }}
        #echo "::set-env name=GPG_TTY::$(tty)"
        #echo ${{ env.GPG_TTY }}
        #sudo apt-get --yes install gnupg2
        #gpg2 --import ./.github/keys/mosipgpgkey_pub.gpg 
        #gpg2 --quiet --batch --passphrase=${{secrets.gpg_secret}}  --allow-secret-key-import --import ./.github/keys/mosipgpgkey_sec.gpg 
     
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-${{ env.BRANCH_NAME }}
    - name: Install xmllint
      run: |
        sudo apt-get update
        sudo apt-get install libxml2-utils
    - name: Setup the settings file for jfrog server
      run: echo "<settings>  <servers> <server> <username>${{secrets.jfrog_user}}</username> <password>${{secrets.jfrog_secret}}</password><id>central</id> </server> </servers> <profiles>   <profile>     <repositories>         <repository>         <snapshots>           <enabled>false</enabled>         </snapshots>         <id>central</id>         <name>libs-release</name>         <url>http://52.172.8.144:8040/artifactory/libs-release</url>       </repository>       <repository>         <snapshots />         <id>snapshots</id>         <name>libs-snapshot</name>         <url>http://52.172.8.144:8040/artifactory/libs-snapshot</url>       </repository>     </repositories>     <pluginRepositories>       <pluginRepository>         <snapshots>           <enabled>false</enabled>         </snapshots>         <id>central</id>         <name>libs-release</name>      <url>http://52.172.8.144:8040/artifactory/libs-release</url>      </pluginRepository>        <pluginRepository>        <snapshots />         <id>snapshots</id>          <name>libs-snapshot</name>          <url>http://52.172.8.144:8040/artifactory/libs-snapshot</url>       </pluginRepository>     </pluginRepositories> <id>artifactory</id>    </profile>  </profiles>  <activeProfiles>    <activeProfile>artifactory</activeProfile>  </activeProfiles></settings> " > $GITHUB_WORKSPACE/settings.xml
    
    - name: Build with Maven
      run: |
        mvn -B -DskipTests package  --file pom.xml -s $GITHUB_WORKSPACE/settings.xml
        
    - name: Publish the maven package
      run: |
        chmod +x ./deploy.sh
        mvn deploy -DskipTests -Dgpg.skip -s $GITHUB_WORKSPACE/settings.xml -f pom.xml -DaltDeploymentRepository=central::default::http://52.172.8.144:8040/artifactory/libs-release
        #cd registration/registration-client/target
        ls -ltr registration/registration-client/target/
        mv registration/registration-client/target/*.zip reg-client.zip
        zip  reg-client.zip MANIFEST.MF
        zip -r reg-client.zip lib/
      env:
        GITHUB_TOKEN: ${{ secrets.token }}
        #GPG_TTY: $(tty)
    
    - name: Upload the client reg-client 
      uses: actions/upload-artifact@v1
      with:
        name: reg-client
        path: registration/registration-client/target/reg-client.zip
      
    #- name: Analyze with SonarCloud
      #run: |
        #cd registration-processor
        #mvn -B verify sonar:sonar -Dsonar.projectKey=${{ secrets.PROJECT_KEY }} -Dsonar.organization=${{ secrets.ORG_KEY }} -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      #env:
        #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  docker-registration-processor-osi-validator-stage:
    needs: build

    runs-on: ubuntu-latest
    env:
      NAMESPACE: wuriguinea
      SERVICE_NAME: registration-processor-osi-validator-stage
      SERVICE_LOCATION: registration-processor/pre-processor/registration-processor-osi-validator-stage

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: release
          path: ./

      - name: Setup branch name
        run: |
          # Strip git ref prefix from version
          echo "::set-env name=BRANCH_NAME::$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')"
          echo ${{ env.BRANCH_NAME }}
      - name: Get version info from pom
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/pom.xml 
          xpath: /*[local-name()="project"]/*[local-name()="version"] 
      
      - name: Unzip and extract the registration-processor-osi-validator-stage
        run: unzip -uj "release.zip" "${{ env.SERVICE_LOCATION }}/target/*" -d "./${{ env.SERVICE_LOCATION }}/target"
      
      - name: Build image
        run: |
          cd "./${{env.SERVICE_LOCATION}}"
          docker build . --file Dockerfile --tag ${{ env.SERVICE_NAME }}
      - name: Log into registry
        run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
